// Generated by CoffeeScript 1.6.3
(function() {
  var sabisu,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  sabisu = angular.module('sabisu', []);

  sabisu.config(function($locationProvider) {
    return $locationProvider.html5Mode(true);
  });

  sabisu.filter('slice', function() {
    return function(arr, start, end) {
      return arr.slice(start, end);
    };
  });

  sabisu.filter('joinBy', function() {
    return function(input, delimiter) {
      return (input || []).join(delimiter || ',');
    };
  });

  sabisu.factory('eventsFactory', function($log, $http) {
    var factory;
    factory = {};
    factory.searchEvents = function(search_query, sort, limit) {
      var int_types;
      if (sort === 'age') {
        sort = 'state_change';
      }
      if (sort === '-age') {
        sort = '-state_change';
      }
      int_types = ['issued', '-issued', 'state_change', '-state_change', 'status', '-status', 'occurences', '-occurences'];
      if (__indexOf.call(int_types, sort) < 0) {
        sort = sort + '<string>';
      }
      sort = "[\"" + sort + "\"]";
      if (search_query === '') {
        search_query = '*:*';
      }
      return $http({
        method: 'GET',
        url: '/api/events/search',
        params: {
          query: search_query,
          limit: limit,
          sort: sort
        }
      });
    };
    factory.resolveEvent = function(client, check) {
      return $http({
        method: 'POST',
        url: '/sensu/event/resolve',
        data: {
          client: client,
          check: check
        }
      });
    };
    factory.changes = function(params) {
      return $http({
        method: 'GET',
        url: '/api/changes',
        params: params
      });
    };
    factory.last_sequence = function() {
      return $http({
        method: 'GET',
        url: '/api/changes',
        params: {
          limit: 1,
          descending: true
        }
      });
    };
    return factory;
  });

  sabisu.factory('stashesFactory', function($log, $http) {
    var factory;
    factory = {};
    factory.stashes = function() {
      return $http.get('/sensu/stashes');
    };
    factory.saveStash = function(stash) {
      return $http.post("/sensu/stashes", stash);
    };
    factory.deleteStash = function(path) {
      return $http["delete"]("/sensu/stashes/" + path);
    };
    return factory;
  });

  sabisu.controller('eventsController', function($scope, $log, $location, $filter, eventsFactory, stashesFactory) {
    $scope.checks = [];
    $scope.clients = [];
    $scope.events = [];
    $scope.events_spin = false;
    $scope.bulk = 'show';
    $scope.isActive = true;
    $scope.showDetails = [];
    $scope.previous_events_ranges = {};
    $scope.previous_events_counts = {};
    $scope.previous_events_events = {};
    $(window).on('focus', function() {
      $scope.isActive = true;
      $scope.updateEvents();
      return $scope.changes();
    });
    $(window).on('blur', function() {
      return $scope.isActive = false;
    });
    if ($location.search().query != null) {
      $scope.search_field = $location.search().query;
    } else {
      $scope.search_field = '';
    }
    if ($location.search().sort != null) {
      $scope.sort = $location.search().sort;
    } else {
      $scope.sort = '-age';
    }
    if ($location.search().limit != null) {
      $scope.limit = $location.search().limit;
    } else {
      $scope.limit = '50';
    }
    $scope.buildSilencePopover = function(stash) {
      var html, rel_time;
      html = '<div class="silence_window">';
      if (stash['content']['timestamp'] != null) {
        html = "<dl class=\"dl-horizontal\">\n<dt>Created</dt>\n<dd>" + ($filter('date')(stash['content']['timestamp'] * 1000, "short")) + "</dd>";
      }
      if (stash['content']['author'] != null) {
        html += "<dt>Author</dt>\n<dd>" + stash['content']['author'] + "</dd>";
      }
      if (stash['expire'] != null) {
        rel_time = moment.unix(parseInt(stash['content']['timestamp']) + parseInt(stash['expire'])).fromNow();
        html += "<dt class=\"text-warning\">Expires</dt>\n<dd class=\"text-warning\">" + rel_time + "</dd>";
      }
      if (stash['content']['expiration'] === 'resolve') {
        html += "<dt class=\"text-success\">Expires</dt>\n<dd class=\"text-success\">On resolve</dt>";
      }
      if (stash['content']['expiration'] === 'never') {
        html += "<dt class=\"text-danger\">Expires</dt>\n<dd class=\"text-danger\">Never</dt>";
      }
      html += "</dl>";
      if (stash['content']['comment'] != null) {
        html += "<dl>\n<dt>Comment</dt>\n<dd>" + stash['content']['comment'] + "</dd>\n</dl>";
      }
      html += "<button type=\"button\" class=\"deleteSilenceBtn btn btn-danger btn-sm pull-right\" onclick=\"angular.element($('#eventsController')).scope().deleteSilence('" + stash['path'] + "')\">\n<span class=\"glyphicon glyphicon-remove\"></span> Delete\n</button>";
      return html += "</div>";
    };
    $scope.updateStashes = function() {
      return stashesFactory.stashes().success(function(data, status, headers, config) {
        var check, client, event, parts, stash, stashes, _base, _base1, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
        stashes = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          stash = data[_i];
          if (stash['path'].match(/^silence\//)) {
            stashes.push(stash);
          }
        }
        $scope.stashes = stashes;
        _ref = $scope.stashes;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          stash = _ref[_j];
          parts = stash['path'].split('/', 3);
          client = parts[1];
          if (parts.length > 2) {
            check = parts[2];
          } else {
            check = null;
          }
          _ref1 = $scope.events;
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            event = _ref1[_k];
            if ((_base = event.client).silenced == null) {
              _base.silenced = false;
            }
            if ((_base1 = event.check).silenced == null) {
              _base1.silenced = false;
            }
            if (client === event.client.name) {
              if (check === null) {
                event.client.silenced = true;
                event.client.silence_html = $scope.buildSilencePopover(stash);
                break;
              } else {
                if (check === event.check.name) {
                  event.check.silenced = true;
                  event.check.silence_html = $scope.buildSilencePopover(stash);
                  break;
                }
              }
            }
          }
        }
        $('.silenceBtn').popover({
          trigger: 'click',
          html: true,
          placement: 'top',
          container: 'body',
          title: "Silence Details <button type=\"button\" class=\"btn btn-link btn-xs pull-right close_popover\" onclick=\"$('.silenceBtn').popover('hide')\"><span class=\"glyphicon glyphicon-remove\"></span>close</button>"
        });
        $('.close_popover').click(function() {
          return $('.silenceBtn').popover('hide');
        });
        $('body').on('click', function(e) {
          return $('[data-toggle="popover"]').each(function() {
            if (!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0) {
              return $(this).popover('hide');
            }
          });
        });
        return $('.glyphicon-question-sign').tooltip();
      });
    };
    $scope.closePopovers = function() {
      return $('.silenceBtn').popover('hide');
    };
    $scope.updateSilencePath = function(path) {
      return $scope.silencePath = path;
    };
    $scope.saveSilence = function() {
      var author, comment, expiration, re, stash, timerToSec, timer_val, valid;
      valid = true;
      author = $('#author').val();
      if (author === '') {
        $('.silence_author').removeClass('has-success');
        $('.silence_author').addClass('has-error');
        valid = false;
      } else {
        $('.silence_author').removeClass('has-error');
        $('.silence_author').addClass('has-success');
      }
      comment = $('#comment').val();
      if (comment === '') {
        $('.silence_comment').removeClass('has-success');
        $('.silence_comment').addClass('has-error');
        valid = false;
      } else {
        $('.silence_comment').removeClass('has-error');
        $('.silence_comment').addClass('has-success');
      }
      timer_val = $('#timer_val').val();
      expiration = $('input[name=expiration]:checked', '#silence_form').val();
      if (expiration === 'timer') {
        re = new RegExp('^\\d*(m|h|d|w)$');
        if (re.test(timer_val)) {
          $('.silence_timer_val').removeClass('has-error');
          $('.silence_timer_val').addClass('has-success');
        } else {
          $('.silence_timer_val').removeClass('has-success');
          $('.silence_timer_val').addClass('has-error');
          valid = false;
        }
      } else {
        $('.silence_timer_val').removeClass('has-error');
        $('.silence_timer_val').removeClass('has-success');
      }
      timerToSec = function(val) {
        var conversion, q, quantity, u, unit;
        q = new RegExp('^\\d*');
        u = new RegExp('[a-z]$');
        conversion = {
          m: 60,
          h: 60 * 60,
          d: 60 * 60 * 24,
          w: 60 * 60 * 24 * 7
        };
        quantity = val.match(q)[0];
        unit = val.match(u)[0];
        return quantity * conversion[unit];
      };
      if (valid) {
        stash = {};
        stash['path'] = "silence/" + $scope.silencePath;
        stash['content'] = {};
        stash['content']['timestamp'] = Math.round((new Date().getTime()) / 1000);
        stash['content']['author'] = author;
        stash['content']['comment'] = comment;
        stash['content']['expiration'] = expiration;
        if (expiration === 'timer') {
          stash['expire'] = timerToSec(timer_val);
        }
        return stashesFactory.saveStash(stash).success(function(data, status, headers, config) {
          $scope.updateStashes();
          author = $('#author').val();
          $('.silence_author').removeClass('has-success');
          $('.silence_author').removeClass('has-error');
          comment = $('#comment').val();
          $('.silence_comment').removeClass('has-success');
          $('.silence_comment').removeClass('has-error');
          timer_val = $('#timer_val').val();
          expiration = $('input[name=expiration]:checked', '#silence_form').val();
          $('.silence_timer_val').removeClass('has-error');
          $('.silence_timer_val').removeClass('has-success');
          return $('#silence_window').modal('hide');
        }).error(function(data, status, headers, config) {
          return alert("Failed to silence: (" + status + ") " + data);
        });
      }
    };
    $scope.deleteSilence = function(path) {
      return stashesFactory.deleteStash(path).success(function(data, status, headers, config) {
        $scope.updateStashes();
        return $scope.closePopovers();
      }).error(function(data, status, headers, config) {
        return alert("Failed to delete silence");
      });
    };
    $scope.resolveEvent = function(client, check) {
      return eventsFactory.resolveEvent(client, check).success(function(data, status, headers, config) {
        return $scope.updateEvents();
      }).error(function(data, status, headers, config) {
        return alert("Faild to resolve event: " + client + "/" + check);
      });
    };
    $scope.updateEvents = function() {
      if (!($scope.events.length > 0)) {
        $scope.events_spin = true;
      }
      $location.search('query', $scope.search_field);
      $location.search('sort', $scope.sort);
      $location.search('limit', $scope.limit);
      return eventsFactory.searchEvents($scope.search_field, $scope.sort, $scope.limit).success(function(data, status, headers, config) {
        var check, checks, client, color, datapoints, event, events, id, k, parts, stash, statuses, v, _base, _base1, _i, _j, _len, _len1, _ref, _ref1, _ref2;
        color = ['success', 'warning', 'danger', 'info'];
        status = ['OK', 'Warning', 'Critical', 'Unknown'];
        events = [];
        if ('bookmark' in data) {
          $scope.bookmark = data['bookmark'];
        }
        if ('count' in data) {
          $scope.count = data['count'];
        }
        if ('ranges' in data && !angular.equals($scope.previous_events_ranges, data['ranges']['status'])) {
          statuses = data['ranges']['status'];
          $scope.previous_events_ranges = statuses;
          $('#stats_status').find('#totals').find('.label-success').text("OK: " + statuses['OK']);
          $('#stats_status').find('#totals').find('.label-warning').text("Warning: " + statuses['Warning']);
          $('#stats_status').find('#totals').find('.label-danger').text("Critical: " + statuses['Critical']);
          $('#stats_status').find('#totals').find('.label-info').text("Unknown: " + statuses['Unknown']);
        }
        if ('counts' in data && !angular.equals($scope.previous_events_counts, data['counts'])) {
          $scope.previous_events_counts = data['counts'];
          checks = data['counts']['check'];
          datapoints = [];
          for (k in checks) {
            v = checks[k];
            datapoints.push([k, v]);
          }
          datapoints.sort(function(a, b) {
            return a[1] - b[1];
          });
          $scope.checks = datapoints.reverse();
          checks = data['counts']['client'];
          datapoints = [];
          for (k in checks) {
            v = checks[k];
            datapoints.push([k, v]);
          }
          datapoints.sort(function(a, b) {
            return a[1] - b[1];
          });
          $scope.clients = datapoints.reverse();
        }
        if ('rows' in data && !angular.equals($scope.previous_events_events, data['rows'])) {
          $scope.previous_events_events = angular.copy(data['rows']);
          _ref = data['rows'];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            event = _ref[_i];
            event = event['doc']['event'];
            id = "" + event['client']['name'] + "/" + event['check']['name'];
            event['id'] = CryptoJS.MD5(id).toString(CryptoJS.enc.Base64);
            if (_ref1 = event.id, __indexOf.call($scope.showDetails, _ref1) >= 0) {
              event.showdetails = 'in';
            } else {
              event.showdetails = '';
            }
            event['color'] = color[event['check']['status']];
            event['wstatus'] = status[event['check']['status']];
            event['rel_time'] = moment.unix(event['check']['state_change']).fromNow();
            event['check']['issued'] = event['check']['issued'] * 1000;
            if (event['check']['state_change'] != null) {
              event['check']['state_change'] = event['check']['state_change'] * 1000;
            }
            if ((_base = event.client).silenced == null) {
              _base.silenced = false;
            }
            if ((_base1 = event.check).silenced == null) {
              _base1.silenced = false;
            }
            if ($scope.stashes != null) {
              _ref2 = $scope.stashes;
              for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                stash = _ref2[_j];
                parts = stash['path'].split('/', 3);
                client = parts[1];
                if (parts.length > 2) {
                  check = parts[2];
                } else {
                  check = null;
                }
                if (client === event.client.name) {
                  if (check === null) {
                    event.client.silenced = true;
                    event.client.silence_html = $scope.buildSilencePopover(stash);
                  } else if (check === event.check.name) {
                    event.check.silenced = true;
                    event.check.silence_html = $scope.buildSilencePopover(stash);
                  }
                }
              }
            }
            events.push(event);
          }
          $scope.events_spin = false;
          if (!angular.equals($scope.events, events)) {
            $scope.events = events;
            return $scope.updateStashes();
          }
        }
      });
    };
    $scope.updateEvents();
    $scope.changes = function() {
      var params;
      $log.info("STARTING _CHANGES FEED");
      params = {
        feed: 'longpoll',
        heartbeat: 10000
      };
      if ($scope.last_seq != null) {
        params['since'] = $scope.last_seq;
        return eventsFactory.changes(params).success(function(data, status, headers, config) {
          $scope.last_seq = data['last_seq'];
          $scope.updateEvents();
          if ($scope.isActive === true) {
            return $scope.changes();
          }
        }).error(function(data, status, headers, config) {
          $log.error("failed changes request (" + status + ") - " + data);
          if ($scope.isActive === true) {
            return $scope.changes();
          }
        });
      }
    };
    $scope.get_sequence = function() {
      return eventsFactory.last_sequence().success(function(data, status, headers, config) {
        $scope.last_seq = data['last_seq'];
        $log.info($scope.last_seq);
        return $scope.changes();
      });
    };
    $scope.get_sequence();
    $scope.bulkToggleDetails = function() {
      var event, mySwitch, _i, _len, _ref, _results;
      mySwitch = $scope.bulk;
      _ref = $scope.events;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        event = _ref[_i];
        _results.push($("#" + event['id']).collapse(mySwitch));
      }
      return _results;
    };
    $('.collapse').on('hide.bs.collapse', function() {
      return $scope.bulk = 'show';
    });
    $('.collapse').on('show.bs.collapse', function() {
      return $scope.bulk = 'hide';
    });
    $scope.toggleDetails = function(id) {
      var i;
      if (!$("#" + id).hasClass('in')) {
        $("#" + id).collapse('show');
        if ($scope.showDetails.indexOf(id) === -1) {
          $scope.showDetails.push(id);
        }
        $("#" + id).parent().find('.toggleBtnIcon').removeClass('glyphicon-collapse-down');
        $("#" + id).parent().find('.toggleBtnIcon').addClass('glyphicon-collapse-up');
      } else {
        $("#" + id).collapse('hide');
        i = $scope.showDetails.indexOf(id);
        if (i !== -1) {
          $scope.showDetails.splice(i, 1);
        }
        $("#" + id).parent().find('.toggleBtnIcon').removeClass('glyphicon-collapse-up');
        $("#" + id).parent().find('.toggleBtnIcon').addClass('glyphicon-collapse-down');
      }
      return $log.info($scope.showDetails);
    };
    return $scope.togglePopover = function() {
      $(this).popover();
      return $(this).popover('toggle');
    };
  });

}).call(this);
